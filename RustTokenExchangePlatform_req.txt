Acomplete token exchange platform in Rust requires a significant amount of time and effort. An overview of the main components that I would need to consider when building such a platform are shown below.

(1) Token contract: A smart contract that defines the token's properties, such as the total supply, the token symbol, and the token name. The contract should also implement the necessary functionality for transferring tokens and managing the token's state.

(2) Wallets: A wallet is a software program that stores public and private keys and interacts with the token contract. Users would need to create wallets to store and manage their tokens.

(3) Order book: An order book is a database that stores all open orders on the exchange. When a user places an order to buy or sell tokens, the order is added to the order book.

(4) Matching engine: The matching engine matches buy and sell orders based on price and quantity. When a match is found, the engine executes the trade and updates the order book.

(5) User interface: A user interface allows users to interact with the exchange and perform various actions such as buying and selling tokens, depositing and withdrawing funds, and viewing account balances.

(6) Security measures: Security is critical for any exchange platform. I would need to implement measures such as two-factor authentication, SSL encryption, and KYC/AML procedures to ensure that users' funds and data are protected.

Some popular Rust libraries and frameworks that I could use for building a token exchange platform include actix-web, diesel, diesel-derive-enum, juniper, jsonwebtoken, rust-postgres, serde, and serde_json.

Building a complete token exchange platform is a significant undertaking, and it's important to carefully consider the architecture and design of the platform to ensure that it meets the needs of its users and can handle the expected volume of trades. It's also important to thoroughly test the platform before launching it to ensure that it is secure and reliable.